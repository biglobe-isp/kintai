@startuml

package api層 {
  class Main {
    String[]
  }

  class 勤怠登録 {
    出勤日Form
    開始時刻Form
    終了時刻Form
    void : 勤怠を登録する(出勤日、開始時刻、終了時刻)
  }

  class 勤怠参照 {
    集計年月Form
    月勤怠 : １ヶ月の勤怠を参照する(集計年月)
  }

  package form {
    class 出勤日Form {
      String
      出勤日 : 出勤日のVoを作り出す()
    }

    class 開始時刻Form {
      String
      開始時刻 : 開始時刻のVoを作り出す()
    }

    class 終了時刻Form {
      String
      終了時刻 : 終了時刻のVoを作り出す()
    }

    class 集計年月Form {
      String
      集計年月 : 集計年月のVoを作り出す()
    }
  }

}

package service層 {
  class 勤怠登録サービス {
    void : 勤怠登録を呼び出す(日付、開始時刻、終了時刻)
  }

  class 勤怠参照サービス {
    月勤怠 : 勤怠参照を呼び出す(集計年月)
  }

}

package datasource層 {
  class 勤怠リポジトリイベント {
    void  : 勤怠登録(勤怠)
    月勤怠 : 勤怠参照(出勤年月)
  }
}

package domain層 {
  class 月勤怠 {
  List<勤怠>
  合計勤務時間 : 合計勤務時間を取得する(集計年月)
  合計残業時間 : 合計残業時間を取得する(集計年月)
  }

  class 1日勤怠 {
    勤務時間
    残業時間
  }

  class 勤怠 {
    出勤日
    開始時刻
    終了時刻
    勤務時間：勤務時間を取得する()
    合計休憩時間 : 合計の休憩時間を取得する()
    残業時間：残業時間を取得する(終了時刻)
  }

  class 出勤日 {
    LocalDate
  }

  class 勤務時間 {
    Integer
  }

  class 開始時刻 {
    LocalTime
  }

  class 終了時刻 {
    LocalTime
  }

  class 集計年月 {
    String
  }

  enum 休憩時間 {
    昼休憩
    夕方休憩
    夜休憩
    休憩時間 : 休憩時間を取得する(開始時刻、終了時刻)
    ※コードに起こせない。。。
  }

  class 残業時間 {
    Integer
  }

  interface 勤怠リポジトリ {
    void  : 勤怠登録(勤怠)
    月勤怠 : 勤怠参照(集計年月)
  }

  勤怠登録 -d-> 勤怠登録サービス
  勤怠参照 -d-> 勤怠参照サービス

  勤怠登録サービス -r-> 勤怠
  勤怠登録サービス -r-> 勤怠リポジトリ

  勤怠参照サービス -r-> 月勤怠
  勤怠参照サービス -r-> 勤怠リポジトリ

  勤怠リポジトリ <|-- 勤怠リポジトリイベント

  勤怠 --> "1" 出勤日

  勤怠 --> "1" 勤務時間
  勤怠 --> "0..*" 休憩時間

  勤怠 --> "1" 開始時刻
  勤怠 --> "1" 終了時刻

  勤怠 --> "1" 残業時間

  休憩時間 --> "1" 休憩開始時刻
  休憩時間 --> "1" 休憩終了時刻

  月勤怠 --> "0..*" 勤怠

  1日勤怠 --> 勤務時間
  1日勤怠 --> 残業時間

  出勤日Form --> "1" 出勤日
  開始時刻Form --> "1" 開始時刻
  終了時刻Form --> "1" 終了時刻
  集計年月Form --> "1" 集計年月

  Main --> 勤怠登録
  Main --> 勤怠参照
}

/'
レビュー指摘事項
・矢印は何を表してるの？
　⇒依存関係。例えば勤怠は勤務時間を知っているけど、勤務時間は勤怠を知ってる。
　⇒であれば、矢印の向きが逆。

・何対何？ 1:nとか書いた方がいいよ

・interfaceのところは白抜き矢印の方が正しい

・休憩時間は固定のデータだから今はオンコーディングでも良いけど、変更を考えてマスタテーブルから参照する方が良いのでは？
　⇒勤怠の中に持った方が良いと思った

・固定値としてDomain層に持つのはあり？
　⇒ありだと思う
　⇒例えば勤怠管理において休憩時間は関心の高い概念なのでDomain層にあるべき
　⇒クラスがDomain層にあるのは納得。ただそのデータの取得元はDBでも良いのでは？
　⇒判断材料として「Domain層だけで単体テストできるか」というのはある
　　主要Domainなので、mockを使わず単体テストできた方が良いのではないか
　⇒頻繁に変わるならそういう要件がでる。ないならテスト容易性を選べばいい

・Repositoryには2つのふるまいが出てきてるけど、Domainに出てないのは何故？
　⇒出てくるべきだけど出せてなかった。どこまでを書けば良いかが把握できてない

・合計勤務時間は誰が計算すべき？
　⇒月勤怠さんが返すと思う。勤務時間が他のDomainオブジェクトから時間を計算して、月勤怠が合計する

・9:00-22:00まで働いた時に勤務時間10時間って出るときに、休憩時間の除外とかをどのクラスでやるイメージ？

・一日の勤怠を表現してみて

・休憩時間が開始と終了で分かれてるのは何故？

・21:45に返ったら休憩時間はどうなるの？そのEnumで45分休憩したって表わせるの？

・この休憩時間は実際に休憩した時間？会社として定められた時間？
　⇒後者
　⇒なら、残業時間とかと並んでるのは違和感がある

・休憩時間を開始・終了にわけてるけど、組み合わせはどう縛るの？
　⇒縛れない...
　⇒会社規定休憩時間っていうEnumにして、昼休憩/夜休憩/深夜休憩などのセットで持った方が良い

・残業時間がLocalTime

・残業時間ってどうやったら出せるの？
　⇒何時から残業なのかと何時まで働いたのかがないと計算できない。矢印足りない。

・日をまたいだらどうなるの？
'/

/'
・
・休憩時間をどうするか考える
'/


@enduml
