@startuml

package api {
    class Main {
        'パラメータのValidation
        'ServiceにわたすEntity, ValueObjectの生成
        void main(args)
    }

    class RegisterController {
        void register(WorkDay workDay, NotVerifiedAttendanceTime notVerifiedAttendanceTime)
    }

    class MonthlyTotalController {
        void monthlyTotal(args)
    }

    class DateValidator {
        String value;
        String format;
        --
        boolean isValid()
    }

    class TimeValidator {
        String value;
        --
        boolean isValid()
    }
}

package service {
    class AttendanceService <<Service>> {
        '遅刻の場合はNG → 勤務時間の算出 → 登録
        void registerAttendance(WorkDay workDay, VerifiedAttendanceTime attendanceTime)
    }

    class MonthlySummaryService <<Service>> {
        '当月分のAttendance取得 → 集計処理呼び出し
        MonthlySummary acquireMonthlyTotal(YearMonth yearMonth)
    }
}

package datasource {
    class AttendanceRepositoryCsv <<Datasource>> {
        void save(Attendance attendance)
        List<Attendance> findSpecifiedYearMonth(YearMonth workMonth)
    }

    file csv {
    }
}

package domain {

    package attendance {
        class AttendanceGenerator {
            Attendance createForRegister(WorkDay workDay, VerifiedAttendanceTime attendanceTime, WorkRegulations workRegulations)
            Attendance createFromCsv(WorkDay workDay, VerifiedAttendanceTime attendanceTime, TimeUnit workingHours, TimeUnit overTimeHours)
        }

        class Attendance <<Entity>>{
            WorkDay workDay
            --
            VerifiedAttendanceTime attendanceTime
            WorkingHours workingHours
            OverTimeHours overTimeHours
        }

        class WorkDay <<ValueObject>> {
            LocalDate date
        }

        class VerifiedAttendanceTime {
            StartTime startTime
            EndTime endTime;
            --
            + AttendanceTime(StartTime startTime, EndTime endTime)
        }

        class NotVerifiedAttendanceTime <<ValueObject>> {
            StartTime startTime
            EndTime endTime
            --
            + boolean isLateness(WorkRegulations workRegulations)
            + AttendanceTime(StartTime startTime, EndTime endTime)
        }

        class StartTime <<ValueObject>> {
            LocalTime localTime
            --
            + StartTime(String startTime)
        }

        class EndTime <<ValueObject>> {
            LocalTime localTime
            --
            + EndTime(String endTime)
        }

        class BreakTimeHours <<ValueObject>> {
            TimeUnit timeUnit
            --
            + BreakTimeHours(VerifiedAttendanceTime attendanceTime, WorkRegulations workRegulations)
        }

        class WorkingHours {
            TimeUnit timeUnit
        }

        class WorkingHoursCalculator {
            WorkingHours calc(VerifiedAttendanceTime attendanceTime, WorkRegulations workRegulations);
        }

        class OverTimeHours {
            TimeUnit timeUnit
        }

        class OvertimeHoursCalculator {
            OverTimeHours calc(WorkingHours workingHours, WorkRegulations workRegulations);
        }
    }

    package workregulations {

        class WorkRegulationsGenerator {
            WorkRegulations getCurrentRegulations()
        }

        class WorkRegulations <<ValueObject>> {
            StartTimeRange startTimeRange
            EndTimeRange endTimeRange
            BreakTimes breakTimes
        }

        class StartTimeRange <<ValueObject>> {
            LocalTime standard
            TimeRange range
        }

        class EndTimeRange <<ValueObject>> {
            LocalTime standard
            TimeRange range
        }

        class BreakTimes <<ValueObject>> {
            List<TimeRange> list
        }
    }

    package monthlysummary {
        class MonthlySummaryCalculator <<DomainService>> {
            MonthlySummary aggregateSpecifiedMonthAttendance(YearMonth yearMonth)
        }

        class MonthlySummary <<ValueObject>> {
            YearMonth workMonth
            WorkingHours workingHours
            OverTimeHours overTimeHours
        }

        class YearMonth <<ValueObject>> {
            int year
            int month
        }
    }

    class TimePoint <<ValueObject>> {
        int hour
        int minutes
    }

    class TimeUnit <<ValueObject>> {
        int hour
        int minutes
    }

    class TimeRange <<ValueObject>> {
        TimePoint timeFrom
        TimePoint timeTo
        --
        int getRangeMinutes()
    }

    interface AttendanceGeneratable {
        Attendance createForRegister(WorkDay workDay, VerifiedAttendanceTime attendanceTime, WorkRegulations workRegulations)
        Attendance createFromCsv(WorkDay workDay, VerifiedAttendanceTime attendanceTime, TimeUnit workingHours, TimeUnit overTimeHours)
    }

    interface WorkRegulationsGeneratable <<Repository>> {
        WorkRegulations getCurrentRegulations()
    }

    interface WorkingHoursCalculable {
        TimeUnit calc(VerifiedAttendanceTime attendanceTime, WorkRegulations workRegulations);
    }

    interface OverTimeHoursCalculable {
        TimeUnit calc(WorkingHours workingHours, WorkRegulations workRegulations);
    }

    interface MonthlySummaryCalculable {
        MonthlySummary aggregateSpecifiedMonthAttendance(YearMonth yearMonth)
    }

    interface AttendanceRepository <<Repository>> {
        void save(Attendance attendance)
        List<Attendance> findSpecifiedYearMonth(YearMonth workMonth)
    }
}


'***** 相関関係 *****
'API
Main ---> RegisterController
Main ---> MonthlyTotalController
RegisterController --> DateValidator
RegisterController --> TimeValidator
MonthlyTotalController --> DateValidator
RegisterController ---> AttendanceService
MonthlyTotalController ---> MonthlySummaryService

'Service
AttendanceService -[hidden]- MonthlySummaryService
AttendanceService ---> AttendanceGeneratable
AttendanceService ---> WorkRegulationsGeneratable
AttendanceService --> AttendanceRepository : save

MonthlySummaryService --> MonthlySummaryCalculable

'Domain-Factory/Calcultor
AttendanceGeneratable--> WorkingHoursCalculable
AttendanceGeneratable--> OverTimeHoursCalculable

WorkingHoursCalculator --> BreakTimeHours

MonthlySummaryCalculable --> AttendanceRepository
MonthlySummaryCalculator --> MonthlySummary
MonthlySummaryCalculator ---> AttendanceGeneratable

WorkingHoursCalculator ---> WorkingHours
OvertimeHoursCalculator ---> OverTimeHours

'Repository
AttendanceRepository ---> AttendanceGeneratable
AttendanceGenerator ---> Attendance
WorkRegulationsGeneratable ---> WorkRegulations
AttendanceRepositoryCsv --> csv

BreakTimeHours ---> WorkRegulations
StartTime ---> WorkRegulations
EndTime ---> WorkRegulations

'実装
AttendanceRepository <|... AttendanceRepositoryCsv
WorkRegulationsGeneratable <|... WorkRegulationsGenerator
AttendanceGeneratable <|... AttendanceGenerator
WorkingHoursCalculable <|... WorkingHoursCalculator
OverTimeHoursCalculable <|... OvertimeHoursCalculator
MonthlySummaryCalculable <|... MonthlySummaryCalculator

'集約
Attendance *-- VerifiedAttendanceTime
VerifiedAttendanceTime *-- StartTime
VerifiedAttendanceTime *-- EndTime
Attendance *-- WorkDay
Attendance *-- WorkingHours
Attendance *-- OverTimeHours
NotVerifiedAttendanceTime *-- StartTime
NotVerifiedAttendanceTime *-- EndTime

WorkRegulations *-- BreakTimes
WorkRegulations *-- StartTimeRange
WorkRegulations *-- EndTimeRange

MonthlySummary --> YearMonth

WorkRegulations -[hidden]- TimeUnit
WorkRegulations -[hidden]- TimeRange
WorkRegulations -[hidden]- TimePoint

@enduml