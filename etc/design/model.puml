@startuml

package domain {
    package 出勤日 {
        class AttendanceDate {
            - ZonedDateTime date
        }
    }
    class ZonedTimePoint {
        - ZonedDateTime time
        + boolean isEqualOrBefore(ZonedTimePoint comparison) 
        + boolean isEqualOrAfter(ZonedTimePoint comparison) 
    }
    class StartTime {
        - ZonedTimePoint timePoint
    }
    class EndTime {
        - ZonedTimePoint timePoint
    }
    StartTime *--> ZonedTimePoint
    EndTime *--> ZonedTimePoint
    
    interface TimeInterval {
        + ZonedTimePoint getStartTimePoint()
        + ZonedTimePoint getEndTimePoint()
        + default boolean contains(ZonedTimePoint timePoint)
        + default boolean containsAll(TimeInterval interval)
        + default boolean within(TimeInterval interval)
        + default TimeIntervalComparedStatus getComparedStatus(TimeInterval interval)
    }

    package 労働時間 {
        class WorkingTimeInterval implements TimeInterval {
            - StartTime startTime
            - EndTime endTime
        }
        class ActualWorkingTimeMinutes {
            - long minutes
            - {static} TimeLengthCalculator TimeLengthCalculator
            + ActualWorkingTimeMinutes(WorkingTimeInterval interval, ActualBreakTimeMinutes actualBreakTimeMinutes)
        }
        WorkingTimeInterval *--> StartTime
        WorkingTimeInterval *--> EndTime
    }

    package 休憩時間 {
        class ActualBreakTimeMinutes {
            - long minutes
        }

        class ActualBreakTimeMinutesCalculator {
            - WorkingTimeInterval workingTimeInterval
            - RegulatedBreakTimeShift regulatedBreakTimeShift
            - {static} TimeLengthCalculator TimeLengthCalculator
            + ActualBreakTimeMinutesCalculator(WorkingTimeInteval workingTimeInterval, RegulatedBreakTimeShift regulatedBreakTimeShift)
            + ActualBreakTimeMinutes calculate()
            - long intersect(RegulatedBreakTimeInterval regulatedBreakTimeInterval)
        }

    }

    package 就業規則 {
        class RegulatedWorkingTimeMinutes {
            - long minutes
        }
        class RegulatedBreakTimeInterval implements TimeInterval {
            - StartTime startTime
            - EndTime endTime
        }
        class RegulatedBreakTimeShift {
            - List<RegulatedBreakTimeInterval> breakTimeInterval
        }
        RegulatedBreakTimeInterval *--> StartTime
        RegulatedBreakTimeInterval *--> EndTime
        RegulatedBreakTimeShift o--> RegulatedBreakTimeInterval
    }

    package 残業時間　{
        class ActualOvertimeMinutes {
            - long minutes
            + ActualOvertimeMinutes(ActualWorkingTimeMinutes actualWorkingTimeMinutes, RegulatedWorkingTimeMinutes regulatedWorkingTimeMinutes)
            - hasOvertime()
        }
    }

    class TimeLengthCalculator {
        - TimeUnits unit
        + calculate(TimeInterval interval)
        + calculate(ZonedTimePoint from ZonedTimePoint to)
    }
    enum TimeUnits {
        MINUTES
        HOURS
    }
    enum TimeIntervalComparedStatus {
        WITHIN
        CONTAIN
        EQUAL_OR_BEFORE
        EQUAL_OR_AFTER
        OUT_OF
    }

    class AttendanceRecording {
        - AttendanceDate attendanceDate
        - WorkingTimeInterval workingTimeInterval
        - ActualWorkingTimeMinutes actualWorkingTimeMinutes
        - ActualOvertimeMinutes actualOvertimeMinutes
    }

    class AttendanceAggregation {
    }

    TimeLengthCalculator --> TimeUnits
    TimeLengthCalculator --> TimeInterval
    TimeLengthCalculator --> ZonedTimePoint

    TimeInterval --> ZonedTimePoint
    TimeInterval --> TimeIntervalComparedStatus


    ActualBreakTimeMinutesCalculator *--> WorkingTimeInterval
    ActualBreakTimeMinutesCalculator *--> RegulatedBreakTimeShift
    ActualBreakTimeMinutesCalculator *--> TimeLengthCalculator
    ActualBreakTimeMinutesCalculator --> ActualBreakTimeMinutes

    ActualWorkingTimeMinutes *--> TimeLengthCalculator
    ActualWorkingTimeMinutes --> WorkingTimeInterval
    ActualWorkingTimeMinutes --> ActualBreakTimeMinutes

    ActualOvertimeMinutes *--> ActualWorkingTimeMinutes
    ActualOvertimeMinutes *--> RegulatedWorkingTimeMinutes

    AttendanceRecording *--> AttendanceDate
    AttendanceRecording *--> WorkingTimeInterval
    AttendanceRecording *--> ActualWorkingTimeMinutes
    AttendanceRecording *--> ActualOvertimeMinutes

}

' package service {
'     class AttendanceRecordingService {
'         - AttendanceRepository attendanceRepository
'         + void register()
'     }
'     class AttendanceAggregationService {
'         - AttendanceRepository attendanceRepository
'         + AttendanceAggregation aggregateByMonth()
'     }

'     interface AttendanceRepository {
'         + register(AttendanceRecording attendanceRecording)
'         + BreakTimeIntervalShift fetchBreakTimeList(AttendanceDate attendanceDate)
'         + RegulatedTimeInterval fetchRegulatedWorkingTimeInterval(AttendanceDate attendanceDate)
'         ' + fetchByMonth(WorkingTimeMinutesCalculation WorkingTimeMinutesCalculation)
'     }
'     AttendanceRecordingService   *--> AttendanceRepository
'     AttendanceAggregationService *--> AttendanceRepository
' }

' package datasource {
'     class AttendanceRepositoryCsv {
'         + register(AttendanceRecording attendanceRecording)
'         + BreakTimeIntervalShift fetchBreakTimeList(AttendanceDate attendanceDate)
'         + RegulatedTimeInterval fetchRegulatedWorkingTimeInterval(AttendanceDate attendanceDate)
'         ' + fetchByMonth(WorkingTimeMinutesCalculation WorkingTimeMinutesCalculation)
'     }

'     ' class WorkingTimeMinutesTableMapper {
'         ' + register(AttendanceRecording attendanceRecording)
'         ' + BreakTimeIntervalShift fetchBreakTimeList(AttendanceDate attendanceDate)
'         ' + RegulatedTimeInterval fetchRegulatedWorkingTimeInterval(AttendanceDate attendanceDate)
'         ' + fetchByMonth(WorkingTimeMinutesCalculation WorkingTimeMinutesCalculation)
'     ' }
' }

' package controller {
'     class AttendanceController {
'         - AttendanceRecordingService attendanceRecordingService
'         - AttendanceAggregationService attendanceAggregationService
'         + void record()
'         + void aggregate()
'     }
' }

' controller .. service
' service .. datasource

@enduml