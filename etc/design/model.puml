@startuml

package domain {
    class ZonedTimePoint {
        - ZonedDateTime time
        + boolean isEqual(ZonedTimePoint comparison) 
        + boolean isBefore(ZonedTimePoint comparison) 
        + boolean isAfter(ZonedTimePoint comparison) 
        + boolean isEqualOrBefore(ZonedTimePoint comparison) 
        + boolean isEqualOrAfter(ZonedTimePoint comparison) 
    }
    class StartTime {
        - ZonedTimePoint timePoint
    }
    class EndTime {
        - ZonedTimePoint timePoint
    }
    StartTime *--> ZonedTimePoint
    EndTime *--> ZonedTimePoint
    
    interface TimeInterval {
        + ZonedTimePoint getStartTimePoint()
        + ZonedTimePoint getEndTimePoint()
        + default boolean contains(ZonedTimePoint timePoint)
        + default boolean containsAll(TimeInterval interval)
        + default boolean within(TimeInterval interval)
        + default TimeIntervalComparedStatus getComparedStatus(TimeInterval comparison)
        + default int between(TimeInterval interval, TimeUnits unit)
        + {static} int between(ZonedTimePoint start, ZonedTimePoint end, TimeUnits unit)
        + default int intersect(TimeInterval comparison, TimeUnits unit)
    }

    package 出勤情報 {
        class AttendanceDate {
            - ZonedDateTime date
        }
        class AttendanceTimeInterval implements TimeInterval {
            - StartTime startTime
            - EndTime endTime
        } 
        class AttendanceTimeMinutes {
            - int minutes
            + AttendanceTimeMinutes(AttendanceTimeInterval attendanceTimeInterval)
        } 
        AttendanceTimeInterval *--> StartTime
        AttendanceTimeInterval *--> EndTime       
    }

    package 休憩時間 {
        class ActualBreakTimeMinutes {
            - int minutes
            + ActualBreakTimeMinutes(AttendanceTimeInterval attendanceTimeInterval, RegulatedBreakTimeShift regulatedBreakTimeShift)
            - sumIntersection(AttendanceTimeInterval attendanceTimeInterval, RegulatedBreakTimeShift regulatedBreakTimeShift)
        }
    }
    package 残業時間　{
        class ActualOvertimeMinutes {
            - int minutes
            + ActualOvertimeMinutes(ActualWorkingTimeMinutes actualWorkingTimeMinutes, RegulatedWorkingTimeMinutes regulatedWorkingTimeMinutes)
            - hasOvertime()
        }
    }
    package 労働時間 {
        class ActualWorkingTimeMinutes {
            - int minutes
            + ActualWorkingTimeMinutes(AttendanceTimeMinutes attendanceTimeMinutes, ActualBreakTimeMinutes actualBreakTimeMinutes)
            - int minusBreakTime(AttendanceTimeMinutes attendanceTimeMinutes, ActualBreakTimeMinutes actualBreakTimeMinutes)
        }
    }

    package 就業規則 {
        class RegulatedWorkingTimeMinutes {
            - int minutes
        }
        class RegulatedBreakTimeInterval implements TimeInterval {
            - StartTime startTime
            - EndTime endTime
        }
        class RegulatedBreakTimeShift {
            - List<RegulatedBreakTimeInterval> breakTimeInterval
        }
        RegulatedBreakTimeInterval *--> StartTime
        RegulatedBreakTimeInterval *--> EndTime
        RegulatedBreakTimeShift o--> RegulatedBreakTimeInterval
    }

    enum TimeUnits {
        MINUTES
        HOURS
    }
    enum TimeIntervalComparedStatus {
        WITHIN
        CONTAIN
        EQUAL_OR_BEFORE
        EQUAL_OR_AFTER
        OUT_OF
    }

    class AttendanceRecord {
        - LocalDate ymd
        - LocalTime startTime
        - LocalTime endTime
        - int workingTimeMinutes
        - int overtimeMinutes
        + AttendanceRecord(AttendanceDate date, AttendanceTimeInterval interval,
                                ActualWorkingTimeMinutes workingTimeMinutes, ActualOvertimeMinutes overtimeMinutes)
    }

    TimeInterval --> ZonedTimePoint
    TimeInterval --> TimeIntervalComparedStatus
    TimeInterval --> TimeUnits

    AttendanceTimeMinutes --> AttendanceTimeInterval
    AttendanceTimeMinutes --> TimeUnits

    ActualBreakTimeMinutes --> AttendanceTimeInterval
    ActualBreakTimeMinutes --> RegulatedBreakTimeShift
    ActualBreakTimeMinutes --> TimeUnits

    ActualWorkingTimeMinutes --> AttendanceTimeMinutes
    ActualWorkingTimeMinutes --> ActualBreakTimeMinutes
    ActualWorkingTimeMinutes --> TimeUnits

    ActualOvertimeMinutes --> ActualWorkingTimeMinutes
    ActualOvertimeMinutes --> RegulatedWorkingTimeMinutes

    AttendanceRecord -right-> AttendanceDate
    AttendanceRecord -right-> AttendanceTimeInterval
    AttendanceRecord -right-> ActualWorkingTimeMinutes
    AttendanceRecord -right-> ActualOvertimeMinutes
    AttendanceRecords o--> AttendanceRecord

}

' package service {
'     class AttendanceRecordingService {
'         - AttendanceRepository attendanceRepository
'         - RegulationRepository regulationRepository
'         + AttendanceRecord register(AttendanceDate attendanceDate, AttendanceTimeInterval attendanceTimeInterval)
'     }
'     class AttendanceAggregationService {
'         - AttendanceRepository attendanceRepository
'         + AttendanceAggregation aggregateMonthly(AggregationMonth aggregationMonth)
'     }
'     interface AttendanceRepository {
'         + register(AttendanceRecord attendanceRecord)
'         + fetchMonthly(AggregationMonth aggregationMonth)
'     }
'     interface RegulationRepository {
'         + fetchBreakTimeIntervalShift(AttendanceDate attendanceDate)
'         + RegulatedWorkingTimeMinutes fetchRegulatedWorkingTimeMinutes(AttendanceDate attendanceDate)
'     }
'     AttendanceRecordingService   *--> AttendanceRepository
'     AttendanceAggregationService *--> AttendanceRepository
' }

' package datasource {
'     class AttendanceRepositoryCsv implements AttendanceRepository {
'         + void register(AttendanceRecord attendanceRecord)
'         + AttendanceRecords fetchMonthly(AggregationMonth aggregationMonth)
'     }
'     class AttendanceRepositoryCsv implements RegulationRepository {
'         + BreakTimeIntervalShift fetchBreakTimeList(AttendanceDate attendanceDate)
'         + RegulatedWorkingTimeMinutes fetchRegulatedWorkingTimeMinutes(AttendanceDate attendanceDate)
'     }
'     ' class AttendanceCsvDao {
'         ' - CsvDao<AttendanceRecordEntity> csvDao 
'         ' + void register(AttendanceRecord attendanceRecord)
'         ' + AttendanceRecordEntities fetchAll(AttendanceDate attendanceDate)
'         ' + AttendaceRecordEntities fetchMonthly(AggregationMonth aggregationMonth)
'     ' }
'     ' class RegulatedBreakTimeCsvDao {
'         ' - CsvDao<RegulatedBreakTimeEntity> csvDao 
'         ' + RegulatedBreakTimeEntities fetchAll(AttendanceDate attendanceDate)
'     ' }
'     ' class RegulatedWorkingTimeMinutesCsvDao {
'         ' - CsvDao<RegulatedWorkingTimeMinutesEntity)
'         ' + void write(Writer writer, T bean)
'         ' + RegulatedWorkingTimeMinutesEntity fetch(AttendanceDate attendanceDate)
'     ' }
'     ' class CsvDao<T> {
'         ' + void writeAll(Writer writer, List<T> beans)
'         ' + void write(Writer writer, T bean)
'         ' + List<T> read(Reader reader, Class<? extends T> type)
'     ' }
'     class AttendanceRecordEntities {
'         - List<AttendanceRecordEntity> records
'         + void upsert(AttendanceRecord record)   
'         + void add(AttendanceRecord record)   
'         + void update(AttendanceRecord record)   
'         + Optional<Integer> indexOf(AttendanceRecord record)        
'     }
'     class AttendanceRecordEntity {
'         - LocalDate ymd
'         - LocalTime startDate
'         - LocalTime endDate
'         - int workingTimeMinutes
'         - int overtimeMinutes
'         - ZonedDateTime updatedAt
'     }
'     class RegulatedBreakTimeEntities {
'         - List<RegulatedBreakTimeEntity> records    
'     }
'     class RegulatedBreakTimeEntity {
'         - LocalDate validStartDate
'         - LocalDate validEndDate
'         - String breakTimeStart
'         - String breakTimeEnd
'     }
'     class RegulatedWorkingTimeMinutesEntity {
'         - LocalDate validStartDate
'         - LocalDate validEndDate
'         - int regulatedWorkingTimeMinutes
'     }
' }

' package controller {
'     class AttendanceController {
'         - AttendanceRecordingService attendanceRecordService
'         - AttendanceAggregationService attendanceAggregationService
'         + void record()
'         + void aggregate()
'     }
'     AttendanceController *--> AttendanceRecordingService
'     AttendanceController *--> AttendanceAggregationService
' }

@enduml